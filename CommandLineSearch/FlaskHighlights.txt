ehseesiMiddle.py:

from flask import Flask, render_template, request
 
app = Flask('flaskApp')
#webcode = open('templates/search_page.html').read()
 
@app.route('/', methods=['GET', 'POST'])
def start():
    if request.method == 'POST':
      return results(request.form('text'))
    else:
      return render_template('search_page.html') 
 
@app.route('/results/<search_query>')
def results(search_query):
 liveStreamSearchv2.twitterSearch(search_query)
 return render_template('results_page.html')
 
if __name__ == '__main__':
    app.run(host = '0.0.0.0', port = 4000)
    
    
-----------------------------------------------------------------------------------------------------------


liveStreamSearchv2.py:

from twython import Twython
import codecs
from operator import itemgetter
from collections import defaultdict
from creds import *


twitter = Twython(APP_KEY, APP_SECRET,
                  FINAL_OAUTH_TOKEN, FINAL_OAUTH_TOKEN_SECRET)
    
def twitterSearch(query):
      results = False
      if query.find("livestream") == -1 and query.find("live stream") == -1:
          query = query + " live stream"
      result = twitter.search(q=query, result_type='recent', count=300)
      tweets = result['statuses']
      # I created two dictionaries, one to sort tweets by how many followers the user hasand another to 
      # match that tweet id to the text and the expanded urls
      ordered_results = {}
      link_dict = {}
      
      # This count variable isn't used by anything but it was useful when testing to make sure the program
      # was actually filtering out some tweets
      count = 0
      # For each tweet it checks the number of followers is greater than 10, and then checks that there is a 
      # link in the tweet
      # Then i stores information into the dictionaries and the continues to sort the tweets by follower and 
      # finally it prints out the tweet text and the expanded url
      
      file = open("results.txt", 'w')
    
      for tweet in tweets:
                        
        if tweet['user']['followers_count'] >= 10:
                          
          if len(tweet['entities']['urls'])>0:
            parseThis = tweet['text']
            
            ordered_results.setdefault(tweet['id'], tweet['user']['followers_count'])
            link_dict.setdefault(tweet['id'],{}).setdefault(tweet['text'], tweet['entities']['urls'][0]['expanded_url'])
            
      sorted_list = sorted(ordered_results.items(), key=itemgetter(1), reverse=True)
      for key,value in sorted_list[:15]:
                        
        for k in link_dict[key]:
                          
          text = (k + " ***LINK*** :" + link_dict[key][k])
          text = text.encode("utf-8")
          file.write(text + "\n")
          
          #print k
          #print "***LINK*** :", link_dict[key][k]
      file.close()
        

----------------------------------------------------------------------------------------------------------------
Excerpt from search_page.html

  <form action="." method="POST"> #my attempt to set a trigger for action
        <input type="text" name="text">
        <input type="submit" name="my-form" value="Send">
    </form>
